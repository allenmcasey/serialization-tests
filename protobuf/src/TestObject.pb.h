// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TestObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TestObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TestObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TestObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TestObject_2eproto;
class TestObject;
class TestObjectDefaultTypeInternal;
extern TestObjectDefaultTypeInternal _TestObject_default_instance_;
class TestObject_TestMapEntry_DoNotUse;
class TestObject_TestMapEntry_DoNotUseDefaultTypeInternal;
extern TestObject_TestMapEntry_DoNotUseDefaultTypeInternal _TestObject_TestMapEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TestObject* Arena::CreateMaybeMessage<::TestObject>(Arena*);
template<> ::TestObject_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage<::TestObject_TestMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TestObject_TestMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestObject_TestMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestObject_TestMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TestObject_TestMapEntry_DoNotUse();
  explicit TestObject_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestObject_TestMapEntry_DoNotUse& other);
  static const TestObject_TestMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestObject_TestMapEntry_DoNotUse*>(&_TestObject_TestMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TestObject.TestMapEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TestObject_2eproto);
    return ::descriptor_table_TestObject_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class TestObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestObject) */ {
 public:
  inline TestObject() : TestObject(nullptr) {}
  virtual ~TestObject();

  TestObject(const TestObject& from);
  TestObject(TestObject&& from) noexcept
    : TestObject() {
    *this = ::std::move(from);
  }

  inline TestObject& operator=(const TestObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestObject& operator=(TestObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestObject& default_instance();

  static inline const TestObject* internal_default_instance() {
    return reinterpret_cast<const TestObject*>(
               &_TestObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestObject& a, TestObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TestObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestObject* New() const final {
    return CreateMaybeMessage<TestObject>(nullptr);
  }

  TestObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestObject& from);
  void MergeFrom(const TestObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestObject";
  }
  protected:
  explicit TestObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TestObject_2eproto);
    return ::descriptor_table_TestObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIntsFieldNumber = 9,
    kStringsFieldNumber = 10,
    kTestMapFieldNumber = 11,
    kS1FieldNumber = 5,
    kS2FieldNumber = 6,
    kS3FieldNumber = 7,
    kS4FieldNumber = 8,
    kInt1FieldNumber = 1,
    kInt2FieldNumber = 2,
    kInt3FieldNumber = 3,
    kInt4FieldNumber = 4,
  };
  // repeated int32 ints = 9;
  int ints_size() const;
  private:
  int _internal_ints_size() const;
  public:
  void clear_ints();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ints() const;
  void _internal_add_ints(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ints();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ints(int index) const;
  void set_ints(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ints(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ints();

  // repeated string strings = 10;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // map<int32, string> testMap = 11;
  int testmap_size() const;
  private:
  int _internal_testmap_size() const;
  public:
  void clear_testmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_testmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_testmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      testmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_testmap();

  // string s1 = 5;
  void clear_s1();
  const std::string& s1() const;
  void set_s1(const std::string& value);
  void set_s1(std::string&& value);
  void set_s1(const char* value);
  void set_s1(const char* value, size_t size);
  std::string* mutable_s1();
  std::string* release_s1();
  void set_allocated_s1(std::string* s1);
  private:
  const std::string& _internal_s1() const;
  void _internal_set_s1(const std::string& value);
  std::string* _internal_mutable_s1();
  public:

  // string s2 = 6;
  void clear_s2();
  const std::string& s2() const;
  void set_s2(const std::string& value);
  void set_s2(std::string&& value);
  void set_s2(const char* value);
  void set_s2(const char* value, size_t size);
  std::string* mutable_s2();
  std::string* release_s2();
  void set_allocated_s2(std::string* s2);
  private:
  const std::string& _internal_s2() const;
  void _internal_set_s2(const std::string& value);
  std::string* _internal_mutable_s2();
  public:

  // string s3 = 7;
  void clear_s3();
  const std::string& s3() const;
  void set_s3(const std::string& value);
  void set_s3(std::string&& value);
  void set_s3(const char* value);
  void set_s3(const char* value, size_t size);
  std::string* mutable_s3();
  std::string* release_s3();
  void set_allocated_s3(std::string* s3);
  private:
  const std::string& _internal_s3() const;
  void _internal_set_s3(const std::string& value);
  std::string* _internal_mutable_s3();
  public:

  // string s4 = 8;
  void clear_s4();
  const std::string& s4() const;
  void set_s4(const std::string& value);
  void set_s4(std::string&& value);
  void set_s4(const char* value);
  void set_s4(const char* value, size_t size);
  std::string* mutable_s4();
  std::string* release_s4();
  void set_allocated_s4(std::string* s4);
  private:
  const std::string& _internal_s4() const;
  void _internal_set_s4(const std::string& value);
  std::string* _internal_mutable_s4();
  public:

  // int32 int1 = 1;
  void clear_int1();
  ::PROTOBUF_NAMESPACE_ID::int32 int1() const;
  void set_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int1() const;
  void _internal_set_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int2 = 2;
  void clear_int2();
  ::PROTOBUF_NAMESPACE_ID::int32 int2() const;
  void set_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int2() const;
  void _internal_set_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int3 = 3;
  void clear_int3();
  ::PROTOBUF_NAMESPACE_ID::int32 int3() const;
  void set_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int3() const;
  void _internal_set_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int4 = 4;
  void clear_int4();
  ::PROTOBUF_NAMESPACE_ID::int32 int4() const;
  void set_int4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int4() const;
  void _internal_set_int4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TestObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ints_;
  mutable std::atomic<int> _ints_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TestObject_TestMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> testmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s4_;
  ::PROTOBUF_NAMESPACE_ID::int32 int1_;
  ::PROTOBUF_NAMESPACE_ID::int32 int2_;
  ::PROTOBUF_NAMESPACE_ID::int32 int3_;
  ::PROTOBUF_NAMESPACE_ID::int32 int4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TestObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestObject

// int32 int1 = 1;
inline void TestObject::clear_int1() {
  int1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::_internal_int1() const {
  return int1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::int1() const {
  // @@protoc_insertion_point(field_get:TestObject.int1)
  return _internal_int1();
}
inline void TestObject::_internal_set_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int1_ = value;
}
inline void TestObject::set_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int1(value);
  // @@protoc_insertion_point(field_set:TestObject.int1)
}

// int32 int2 = 2;
inline void TestObject::clear_int2() {
  int2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::_internal_int2() const {
  return int2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::int2() const {
  // @@protoc_insertion_point(field_get:TestObject.int2)
  return _internal_int2();
}
inline void TestObject::_internal_set_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int2_ = value;
}
inline void TestObject::set_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int2(value);
  // @@protoc_insertion_point(field_set:TestObject.int2)
}

// int32 int3 = 3;
inline void TestObject::clear_int3() {
  int3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::_internal_int3() const {
  return int3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::int3() const {
  // @@protoc_insertion_point(field_get:TestObject.int3)
  return _internal_int3();
}
inline void TestObject::_internal_set_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int3_ = value;
}
inline void TestObject::set_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int3(value);
  // @@protoc_insertion_point(field_set:TestObject.int3)
}

// int32 int4 = 4;
inline void TestObject::clear_int4() {
  int4_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::_internal_int4() const {
  return int4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::int4() const {
  // @@protoc_insertion_point(field_get:TestObject.int4)
  return _internal_int4();
}
inline void TestObject::_internal_set_int4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int4_ = value;
}
inline void TestObject::set_int4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int4(value);
  // @@protoc_insertion_point(field_set:TestObject.int4)
}

// string s1 = 5;
inline void TestObject::clear_s1() {
  s1_.ClearToEmpty();
}
inline const std::string& TestObject::s1() const {
  // @@protoc_insertion_point(field_get:TestObject.s1)
  return _internal_s1();
}
inline void TestObject::set_s1(const std::string& value) {
  _internal_set_s1(value);
  // @@protoc_insertion_point(field_set:TestObject.s1)
}
inline std::string* TestObject::mutable_s1() {
  // @@protoc_insertion_point(field_mutable:TestObject.s1)
  return _internal_mutable_s1();
}
inline const std::string& TestObject::_internal_s1() const {
  return s1_.Get();
}
inline void TestObject::_internal_set_s1(const std::string& value) {
  
  s1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestObject::set_s1(std::string&& value) {
  
  s1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TestObject.s1)
}
inline void TestObject::set_s1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TestObject.s1)
}
inline void TestObject::set_s1(const char* value,
    size_t size) {
  
  s1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TestObject.s1)
}
inline std::string* TestObject::_internal_mutable_s1() {
  
  return s1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestObject::release_s1() {
  // @@protoc_insertion_point(field_release:TestObject.s1)
  return s1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestObject::set_allocated_s1(std::string* s1) {
  if (s1 != nullptr) {
    
  } else {
    
  }
  s1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TestObject.s1)
}

// string s2 = 6;
inline void TestObject::clear_s2() {
  s2_.ClearToEmpty();
}
inline const std::string& TestObject::s2() const {
  // @@protoc_insertion_point(field_get:TestObject.s2)
  return _internal_s2();
}
inline void TestObject::set_s2(const std::string& value) {
  _internal_set_s2(value);
  // @@protoc_insertion_point(field_set:TestObject.s2)
}
inline std::string* TestObject::mutable_s2() {
  // @@protoc_insertion_point(field_mutable:TestObject.s2)
  return _internal_mutable_s2();
}
inline const std::string& TestObject::_internal_s2() const {
  return s2_.Get();
}
inline void TestObject::_internal_set_s2(const std::string& value) {
  
  s2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestObject::set_s2(std::string&& value) {
  
  s2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TestObject.s2)
}
inline void TestObject::set_s2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TestObject.s2)
}
inline void TestObject::set_s2(const char* value,
    size_t size) {
  
  s2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TestObject.s2)
}
inline std::string* TestObject::_internal_mutable_s2() {
  
  return s2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestObject::release_s2() {
  // @@protoc_insertion_point(field_release:TestObject.s2)
  return s2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestObject::set_allocated_s2(std::string* s2) {
  if (s2 != nullptr) {
    
  } else {
    
  }
  s2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TestObject.s2)
}

// string s3 = 7;
inline void TestObject::clear_s3() {
  s3_.ClearToEmpty();
}
inline const std::string& TestObject::s3() const {
  // @@protoc_insertion_point(field_get:TestObject.s3)
  return _internal_s3();
}
inline void TestObject::set_s3(const std::string& value) {
  _internal_set_s3(value);
  // @@protoc_insertion_point(field_set:TestObject.s3)
}
inline std::string* TestObject::mutable_s3() {
  // @@protoc_insertion_point(field_mutable:TestObject.s3)
  return _internal_mutable_s3();
}
inline const std::string& TestObject::_internal_s3() const {
  return s3_.Get();
}
inline void TestObject::_internal_set_s3(const std::string& value) {
  
  s3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestObject::set_s3(std::string&& value) {
  
  s3_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TestObject.s3)
}
inline void TestObject::set_s3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TestObject.s3)
}
inline void TestObject::set_s3(const char* value,
    size_t size) {
  
  s3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TestObject.s3)
}
inline std::string* TestObject::_internal_mutable_s3() {
  
  return s3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestObject::release_s3() {
  // @@protoc_insertion_point(field_release:TestObject.s3)
  return s3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestObject::set_allocated_s3(std::string* s3) {
  if (s3 != nullptr) {
    
  } else {
    
  }
  s3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TestObject.s3)
}

// string s4 = 8;
inline void TestObject::clear_s4() {
  s4_.ClearToEmpty();
}
inline const std::string& TestObject::s4() const {
  // @@protoc_insertion_point(field_get:TestObject.s4)
  return _internal_s4();
}
inline void TestObject::set_s4(const std::string& value) {
  _internal_set_s4(value);
  // @@protoc_insertion_point(field_set:TestObject.s4)
}
inline std::string* TestObject::mutable_s4() {
  // @@protoc_insertion_point(field_mutable:TestObject.s4)
  return _internal_mutable_s4();
}
inline const std::string& TestObject::_internal_s4() const {
  return s4_.Get();
}
inline void TestObject::_internal_set_s4(const std::string& value) {
  
  s4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestObject::set_s4(std::string&& value) {
  
  s4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TestObject.s4)
}
inline void TestObject::set_s4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TestObject.s4)
}
inline void TestObject::set_s4(const char* value,
    size_t size) {
  
  s4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TestObject.s4)
}
inline std::string* TestObject::_internal_mutable_s4() {
  
  return s4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestObject::release_s4() {
  // @@protoc_insertion_point(field_release:TestObject.s4)
  return s4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestObject::set_allocated_s4(std::string* s4) {
  if (s4 != nullptr) {
    
  } else {
    
  }
  s4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TestObject.s4)
}

// repeated int32 ints = 9;
inline int TestObject::_internal_ints_size() const {
  return ints_.size();
}
inline int TestObject::ints_size() const {
  return _internal_ints_size();
}
inline void TestObject::clear_ints() {
  ints_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::_internal_ints(int index) const {
  return ints_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestObject::ints(int index) const {
  // @@protoc_insertion_point(field_get:TestObject.ints)
  return _internal_ints(index);
}
inline void TestObject::set_ints(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:TestObject.ints)
}
inline void TestObject::_internal_add_ints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ints_.Add(value);
}
inline void TestObject::add_ints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ints(value);
  // @@protoc_insertion_point(field_add:TestObject.ints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestObject::_internal_ints() const {
  return ints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestObject::ints() const {
  // @@protoc_insertion_point(field_list:TestObject.ints)
  return _internal_ints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestObject::_internal_mutable_ints() {
  return &ints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestObject::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:TestObject.ints)
  return _internal_mutable_ints();
}

// repeated string strings = 10;
inline int TestObject::_internal_strings_size() const {
  return strings_.size();
}
inline int TestObject::strings_size() const {
  return _internal_strings_size();
}
inline void TestObject::clear_strings() {
  strings_.Clear();
}
inline std::string* TestObject::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:TestObject.strings)
  return _internal_add_strings();
}
inline const std::string& TestObject::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& TestObject::strings(int index) const {
  // @@protoc_insertion_point(field_get:TestObject.strings)
  return _internal_strings(index);
}
inline std::string* TestObject::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:TestObject.strings)
  return strings_.Mutable(index);
}
inline void TestObject::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TestObject.strings)
  strings_.Mutable(index)->assign(value);
}
inline void TestObject::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TestObject.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void TestObject::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TestObject.strings)
}
inline void TestObject::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestObject.strings)
}
inline std::string* TestObject::_internal_add_strings() {
  return strings_.Add();
}
inline void TestObject::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TestObject.strings)
}
inline void TestObject::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TestObject.strings)
}
inline void TestObject::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TestObject.strings)
}
inline void TestObject::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TestObject.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestObject::strings() const {
  // @@protoc_insertion_point(field_list:TestObject.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestObject::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:TestObject.strings)
  return &strings_;
}

// map<int32, string> testMap = 11;
inline int TestObject::_internal_testmap_size() const {
  return testmap_.size();
}
inline int TestObject::testmap_size() const {
  return _internal_testmap_size();
}
inline void TestObject::clear_testmap() {
  testmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
TestObject::_internal_testmap() const {
  return testmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
TestObject::testmap() const {
  // @@protoc_insertion_point(field_map:TestObject.testMap)
  return _internal_testmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
TestObject::_internal_mutable_testmap() {
  return testmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
TestObject::mutable_testmap() {
  // @@protoc_insertion_point(field_mutable_map:TestObject.testMap)
  return _internal_mutable_testmap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TestObject_2eproto
