// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestObject.proto

#include "TestObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TestObject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestObject_TestMapEntry_DoNotUse_TestObject_2eproto;
class TestObject_TestMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestObject_TestMapEntry_DoNotUse> _instance;
} _TestObject_TestMapEntry_DoNotUse_default_instance_;
class TestObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestObject> _instance;
} _TestObject_default_instance_;
static void InitDefaultsscc_info_TestObject_TestObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TestObject_default_instance_;
    new (ptr) ::TestObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestObject_TestObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestObject_TestObject_2eproto}, {
      &scc_info_TestObject_TestMapEntry_DoNotUse_TestObject_2eproto.base,}};

static void InitDefaultsscc_info_TestObject_TestMapEntry_DoNotUse_TestObject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TestObject_TestMapEntry_DoNotUse_default_instance_;
    new (ptr) ::TestObject_TestMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestObject_TestMapEntry_DoNotUse_TestObject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestObject_TestMapEntry_DoNotUse_TestObject_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TestObject_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TestObject_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TestObject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TestObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TestObject_TestMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestObject_TestMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TestObject_TestMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TestObject_TestMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TestObject, int1_),
  PROTOBUF_FIELD_OFFSET(::TestObject, int2_),
  PROTOBUF_FIELD_OFFSET(::TestObject, int3_),
  PROTOBUF_FIELD_OFFSET(::TestObject, int4_),
  PROTOBUF_FIELD_OFFSET(::TestObject, s1_),
  PROTOBUF_FIELD_OFFSET(::TestObject, s2_),
  PROTOBUF_FIELD_OFFSET(::TestObject, s3_),
  PROTOBUF_FIELD_OFFSET(::TestObject, s4_),
  PROTOBUF_FIELD_OFFSET(::TestObject, ints_),
  PROTOBUF_FIELD_OFFSET(::TestObject, strings_),
  PROTOBUF_FIELD_OFFSET(::TestObject, testmap_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TestObject_TestMapEntry_DoNotUse)},
  { 9, -1, sizeof(::TestObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TestObject_TestMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TestObject_default_instance_),
};

const char descriptor_table_protodef_TestObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020TestObject.proto\"\356\001\n\nTestObject\022\014\n\004int"
  "1\030\001 \001(\005\022\014\n\004int2\030\002 \001(\005\022\014\n\004int3\030\003 \001(\005\022\014\n\004i"
  "nt4\030\004 \001(\005\022\n\n\002s1\030\005 \001(\t\022\n\n\002s2\030\006 \001(\t\022\n\n\002s3\030"
  "\007 \001(\t\022\n\n\002s4\030\010 \001(\t\022\014\n\004ints\030\t \003(\005\022\017\n\007strin"
  "gs\030\n \003(\t\022)\n\007testMap\030\013 \003(\0132\030.TestObject.T"
  "estMapEntry\032.\n\014TestMapEntry\022\013\n\003key\030\001 \001(\005"
  "\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TestObject_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TestObject_2eproto_sccs[2] = {
  &scc_info_TestObject_TestObject_2eproto.base,
  &scc_info_TestObject_TestMapEntry_DoNotUse_TestObject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TestObject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TestObject_2eproto = {
  false, false, descriptor_table_protodef_TestObject_2eproto, "TestObject.proto", 267,
  &descriptor_table_TestObject_2eproto_once, descriptor_table_TestObject_2eproto_sccs, descriptor_table_TestObject_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_TestObject_2eproto::offsets,
  file_level_metadata_TestObject_2eproto, 2, file_level_enum_descriptors_TestObject_2eproto, file_level_service_descriptors_TestObject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TestObject_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TestObject_2eproto)), true);

// ===================================================================

TestObject_TestMapEntry_DoNotUse::TestObject_TestMapEntry_DoNotUse() {}
TestObject_TestMapEntry_DoNotUse::TestObject_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestObject_TestMapEntry_DoNotUse::MergeFrom(const TestObject_TestMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestObject_TestMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestObject_TestMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class TestObject::_Internal {
 public:
};

TestObject::TestObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ints_(arena),
  strings_(arena),
  testmap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestObject)
}
TestObject::TestObject(const TestObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ints_(from.ints_),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  testmap_.MergeFrom(from.testmap_);
  s1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s1().empty()) {
    s1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s1(), 
      GetArena());
  }
  s2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2().empty()) {
    s2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s2(), 
      GetArena());
  }
  s3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s3().empty()) {
    s3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s3(), 
      GetArena());
  }
  s4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s4().empty()) {
    s4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s4(), 
      GetArena());
  }
  ::memcpy(&int1_, &from.int1_,
    static_cast<size_t>(reinterpret_cast<char*>(&int4_) -
    reinterpret_cast<char*>(&int1_)) + sizeof(int4_));
  // @@protoc_insertion_point(copy_constructor:TestObject)
}

void TestObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestObject_TestObject_2eproto.base);
  s1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&int1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&int4_) -
      reinterpret_cast<char*>(&int1_)) + sizeof(int4_));
}

TestObject::~TestObject() {
  // @@protoc_insertion_point(destructor:TestObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  s1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestObject::ArenaDtor(void* object) {
  TestObject* _this = reinterpret_cast< TestObject* >(object);
  (void)_this;
}
void TestObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestObject& TestObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestObject_TestObject_2eproto.base);
  return *internal_default_instance();
}


void TestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:TestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ints_.Clear();
  strings_.Clear();
  testmap_.Clear();
  s1_.ClearToEmpty();
  s2_.ClearToEmpty();
  s3_.ClearToEmpty();
  s4_.ClearToEmpty();
  ::memset(&int1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int4_) -
      reinterpret_cast<char*>(&int1_)) + sizeof(int4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 int1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          int1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          int2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          int3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          int4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_s1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestObject.s1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_s2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestObject.s2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_s3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestObject.s3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_s4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestObject.s4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ints = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ints(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_ints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestObject.strings"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> testMap = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&testmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 int1 = 1;
  if (this->int1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_int1(), target);
  }

  // int32 int2 = 2;
  if (this->int2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_int2(), target);
  }

  // int32 int3 = 3;
  if (this->int3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int3(), target);
  }

  // int32 int4 = 4;
  if (this->int4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_int4(), target);
  }

  // string s1 = 5;
  if (this->s1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s1().data(), static_cast<int>(this->_internal_s1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObject.s1");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_s1(), target);
  }

  // string s2 = 6;
  if (this->s2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2().data(), static_cast<int>(this->_internal_s2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObject.s2");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_s2(), target);
  }

  // string s3 = 7;
  if (this->s3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s3().data(), static_cast<int>(this->_internal_s3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObject.s3");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_s3(), target);
  }

  // string s4 = 8;
  if (this->s4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s4().data(), static_cast<int>(this->_internal_s4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObject.s4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_s4(), target);
  }

  // repeated int32 ints = 9;
  {
    int byte_size = _ints_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_ints(), byte_size, target);
    }
  }

  // repeated string strings = 10;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObject.strings");
    target = stream->WriteString(10, s, target);
  }

  // map<int32, string> testMap = 11;
  if (!this->_internal_testmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TestObject.TestMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_testmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_testmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_testmap().begin();
          it != this->_internal_testmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestObject_TestMapEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_testmap().begin();
          it != this->_internal_testmap().end(); ++it) {
        target = TestObject_TestMapEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestObject)
  return target;
}

size_t TestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ints = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ints_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string strings = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strings_.size());
  for (int i = 0, n = strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strings_.Get(i));
  }

  // map<int32, string> testMap = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_testmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_testmap().begin();
      it != this->_internal_testmap().end(); ++it) {
    total_size += TestObject_TestMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string s1 = 5;
  if (this->s1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());
  }

  // string s2 = 6;
  if (this->s2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2());
  }

  // string s3 = 7;
  if (this->s3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s3());
  }

  // string s4 = 8;
  if (this->s4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s4());
  }

  // int32 int1 = 1;
  if (this->int1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int1());
  }

  // int32 int2 = 2;
  if (this->int2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int2());
  }

  // int32 int3 = 3;
  if (this->int3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int3());
  }

  // int32 int4 = 4;
  if (this->int4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TestObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestObject)
    MergeFrom(*source);
  }
}

void TestObject::MergeFrom(const TestObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ints_.MergeFrom(from.ints_);
  strings_.MergeFrom(from.strings_);
  testmap_.MergeFrom(from.testmap_);
  if (from.s1().size() > 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2().size() > 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3().size() > 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4().size() > 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.int1() != 0) {
    _internal_set_int1(from._internal_int1());
  }
  if (from.int2() != 0) {
    _internal_set_int2(from._internal_int2());
  }
  if (from.int3() != 0) {
    _internal_set_int3(from._internal_int3());
  }
  if (from.int4() != 0) {
    _internal_set_int4(from._internal_int4());
  }
}

void TestObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestObject::CopyFrom(const TestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestObject::IsInitialized() const {
  return true;
}

void TestObject::InternalSwap(TestObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ints_.InternalSwap(&other->ints_);
  strings_.InternalSwap(&other->strings_);
  testmap_.Swap(&other->testmap_);
  s1_.Swap(&other->s1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s2_.Swap(&other->s2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s3_.Swap(&other->s3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s4_.Swap(&other->s4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestObject, int4_)
      + sizeof(TestObject::int4_)
      - PROTOBUF_FIELD_OFFSET(TestObject, int1_)>(
          reinterpret_cast<char*>(&int1_),
          reinterpret_cast<char*>(&other->int1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestObject::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TestObject_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::TestObject_TestMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestObject_TestMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TestObject* Arena::CreateMaybeMessage< ::TestObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
