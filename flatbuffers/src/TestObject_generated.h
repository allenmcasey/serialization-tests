// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTOBJECT_TEST_H_
#define FLATBUFFERS_GENERATED_TESTOBJECT_TEST_H_

#include "flatbuffers/flatbuffers.h"

namespace Test {

struct TestObject;
struct TestObjectBuilder;

struct TestObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TestObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INT1 = 4,
    VT_INT2 = 6,
    VT_INT3 = 8,
    VT_INT4 = 10,
    VT_STRING1 = 12,
    VT_STRING2 = 14,
    VT_STRING3 = 16,
    VT_STRING4 = 18,
    VT_INTVEC = 20,
    VT_STRINGVEC = 22
  };
  int32_t int1() const {
    return GetField<int32_t>(VT_INT1, 1);
  }
  int32_t int2() const {
    return GetField<int32_t>(VT_INT2, 2);
  }
  int32_t int3() const {
    return GetField<int32_t>(VT_INT3, 3);
  }
  int32_t int4() const {
    return GetField<int32_t>(VT_INT4, 4);
  }
  const flatbuffers::String *string1() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING1);
  }
  const flatbuffers::String *string2() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING2);
  }
  const flatbuffers::String *string3() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING3);
  }
  const flatbuffers::String *string4() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING4);
  }
  const flatbuffers::Vector<int32_t> *intVec() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INTVEC);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *stringVec() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STRINGVEC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_INT1) &&
           VerifyField<int32_t>(verifier, VT_INT2) &&
           VerifyField<int32_t>(verifier, VT_INT3) &&
           VerifyField<int32_t>(verifier, VT_INT4) &&
           VerifyOffset(verifier, VT_STRING1) &&
           verifier.VerifyString(string1()) &&
           VerifyOffset(verifier, VT_STRING2) &&
           verifier.VerifyString(string2()) &&
           VerifyOffset(verifier, VT_STRING3) &&
           verifier.VerifyString(string3()) &&
           VerifyOffset(verifier, VT_STRING4) &&
           verifier.VerifyString(string4()) &&
           VerifyOffset(verifier, VT_INTVEC) &&
           verifier.VerifyVector(intVec()) &&
           VerifyOffset(verifier, VT_STRINGVEC) &&
           verifier.VerifyVector(stringVec()) &&
           verifier.VerifyVectorOfStrings(stringVec()) &&
           verifier.EndTable();
  }
};

struct TestObjectBuilder {
  typedef TestObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_int1(int32_t int1) {
    fbb_.AddElement<int32_t>(TestObject::VT_INT1, int1, 1);
  }
  void add_int2(int32_t int2) {
    fbb_.AddElement<int32_t>(TestObject::VT_INT2, int2, 2);
  }
  void add_int3(int32_t int3) {
    fbb_.AddElement<int32_t>(TestObject::VT_INT3, int3, 3);
  }
  void add_int4(int32_t int4) {
    fbb_.AddElement<int32_t>(TestObject::VT_INT4, int4, 4);
  }
  void add_string1(flatbuffers::Offset<flatbuffers::String> string1) {
    fbb_.AddOffset(TestObject::VT_STRING1, string1);
  }
  void add_string2(flatbuffers::Offset<flatbuffers::String> string2) {
    fbb_.AddOffset(TestObject::VT_STRING2, string2);
  }
  void add_string3(flatbuffers::Offset<flatbuffers::String> string3) {
    fbb_.AddOffset(TestObject::VT_STRING3, string3);
  }
  void add_string4(flatbuffers::Offset<flatbuffers::String> string4) {
    fbb_.AddOffset(TestObject::VT_STRING4, string4);
  }
  void add_intVec(flatbuffers::Offset<flatbuffers::Vector<int32_t>> intVec) {
    fbb_.AddOffset(TestObject::VT_INTVEC, intVec);
  }
  void add_stringVec(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stringVec) {
    fbb_.AddOffset(TestObject::VT_STRINGVEC, stringVec);
  }
  explicit TestObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestObjectBuilder &operator=(const TestObjectBuilder &);
  flatbuffers::Offset<TestObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestObject> CreateTestObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t int1 = 1,
    int32_t int2 = 2,
    int32_t int3 = 3,
    int32_t int4 = 4,
    flatbuffers::Offset<flatbuffers::String> string1 = 0,
    flatbuffers::Offset<flatbuffers::String> string2 = 0,
    flatbuffers::Offset<flatbuffers::String> string3 = 0,
    flatbuffers::Offset<flatbuffers::String> string4 = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> intVec = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stringVec = 0) {
  TestObjectBuilder builder_(_fbb);
  builder_.add_stringVec(stringVec);
  builder_.add_intVec(intVec);
  builder_.add_string4(string4);
  builder_.add_string3(string3);
  builder_.add_string2(string2);
  builder_.add_string1(string1);
  builder_.add_int4(int4);
  builder_.add_int3(int3);
  builder_.add_int2(int2);
  builder_.add_int1(int1);
  return builder_.Finish();
}

inline flatbuffers::Offset<TestObject> CreateTestObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t int1 = 1,
    int32_t int2 = 2,
    int32_t int3 = 3,
    int32_t int4 = 4,
    const char *string1 = nullptr,
    const char *string2 = nullptr,
    const char *string3 = nullptr,
    const char *string4 = nullptr,
    const std::vector<int32_t> *intVec = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *stringVec = nullptr) {
  auto string1__ = string1 ? _fbb.CreateString(string1) : 0;
  auto string2__ = string2 ? _fbb.CreateString(string2) : 0;
  auto string3__ = string3 ? _fbb.CreateString(string3) : 0;
  auto string4__ = string4 ? _fbb.CreateString(string4) : 0;
  auto intVec__ = intVec ? _fbb.CreateVector<int32_t>(*intVec) : 0;
  auto stringVec__ = stringVec ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*stringVec) : 0;
  return Test::CreateTestObject(
      _fbb,
      int1,
      int2,
      int3,
      int4,
      string1__,
      string2__,
      string3__,
      string4__,
      intVec__,
      stringVec__);
}

inline const Test::TestObject *GetTestObject(const void *buf) {
  return flatbuffers::GetRoot<Test::TestObject>(buf);
}

inline const Test::TestObject *GetSizePrefixedTestObject(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Test::TestObject>(buf);
}

inline bool VerifyTestObjectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test::TestObject>(nullptr);
}

inline bool VerifySizePrefixedTestObjectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test::TestObject>(nullptr);
}

inline void FinishTestObjectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Test::TestObject> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestObjectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Test::TestObject> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Test

#endif  // FLATBUFFERS_GENERATED_TESTOBJECT_TEST_H_
